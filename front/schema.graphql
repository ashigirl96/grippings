# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"mutation root"
type mutation_root {
    "delete data from the table: \"objectives\""
    delete_objectives(
        "filter the rows which have to be deleted"
        where: objectives_bool_exp!
    ): objectives_mutation_response
    "delete single row from the table: \"objectives\""
    delete_objectives_by_pk(id: uuid!): objectives
    "delete data from the table: \"task\""
    delete_task(
        "filter the rows which have to be deleted"
        where: task_bool_exp!
    ): task_mutation_response
    "delete single row from the table: \"task\""
    delete_task_by_pk(id: uuid!): task
    "insert data into the table: \"objectives\""
    insert_objectives(
        "the rows to be inserted"
        objects: [objectives_insert_input!]!,
        "on conflict condition"
        on_conflict: objectives_on_conflict
    ): objectives_mutation_response
    "insert a single row into the table: \"objectives\""
    insert_objectives_one(
        "the row to be inserted"
        object: objectives_insert_input!,
        "on conflict condition"
        on_conflict: objectives_on_conflict
    ): objectives
    "insert data into the table: \"task\""
    insert_task(
        "the rows to be inserted"
        objects: [task_insert_input!]!,
        "on conflict condition"
        on_conflict: task_on_conflict
    ): task_mutation_response
    "insert a single row into the table: \"task\""
    insert_task_one(
        "the row to be inserted"
        object: task_insert_input!,
        "on conflict condition"
        on_conflict: task_on_conflict
    ): task
    "update data of the table: \"objectives\""
    update_objectives(
        "sets the columns of the filtered rows to the given values"
        _set: objectives_set_input,
        "filter the rows which have to be updated"
        where: objectives_bool_exp!
    ): objectives_mutation_response
    "update single row of the table: \"objectives\""
    update_objectives_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: objectives_set_input,
        pk_columns: objectives_pk_columns_input!
    ): objectives
    "update data of the table: \"task\""
    update_task(
        "sets the columns of the filtered rows to the given values"
        _set: task_set_input,
        "filter the rows which have to be updated"
        where: task_bool_exp!
    ): task_mutation_response
    "update single row of the table: \"task\""
    update_task_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: task_set_input,
        pk_columns: task_pk_columns_input!
    ): task
}

"columns and relationships of \"objectives\""
type objectives {
    created_at: timestamptz!
    favorite: Boolean!
    id: uuid!
    notionUrl: String
    title: String!
    updated_at: timestamptz!
}

"aggregated selection of \"objectives\""
type objectives_aggregate {
    aggregate: objectives_aggregate_fields
    nodes: [objectives!]!
}

"aggregate fields of \"objectives\""
type objectives_aggregate_fields {
    count(columns: [objectives_select_column!], distinct: Boolean): Int!
    max: objectives_max_fields
    min: objectives_min_fields
}

"aggregate max on columns"
type objectives_max_fields {
    created_at: timestamptz
    id: uuid
    notionUrl: String
    title: String
    updated_at: timestamptz
}

"aggregate min on columns"
type objectives_min_fields {
    created_at: timestamptz
    id: uuid
    notionUrl: String
    title: String
    updated_at: timestamptz
}

"response of any mutation on the table \"objectives\""
type objectives_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [objectives!]!
}

type query_root {
    "fetch data from the table: \"objectives\""
    objectives(
        "distinct select on columns"
        distinct_on: [objectives_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [objectives_order_by!],
        "filter the rows returned"
        where: objectives_bool_exp
    ): [objectives!]!
    "fetch aggregated fields from the table: \"objectives\""
    objectives_aggregate(
        "distinct select on columns"
        distinct_on: [objectives_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [objectives_order_by!],
        "filter the rows returned"
        where: objectives_bool_exp
    ): objectives_aggregate!
    "fetch data from the table: \"objectives\" using primary key columns"
    objectives_by_pk(id: uuid!): objectives
    "fetch data from the table: \"task\""
    task(
        "distinct select on columns"
        distinct_on: [task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [task_order_by!],
        "filter the rows returned"
        where: task_bool_exp
    ): [task!]!
    "fetch aggregated fields from the table: \"task\""
    task_aggregate(
        "distinct select on columns"
        distinct_on: [task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [task_order_by!],
        "filter the rows returned"
        where: task_bool_exp
    ): task_aggregate!
    "fetch data from the table: \"task\" using primary key columns"
    task_by_pk(id: uuid!): task
}

type subscription_root {
    "fetch data from the table: \"objectives\""
    objectives(
        "distinct select on columns"
        distinct_on: [objectives_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [objectives_order_by!],
        "filter the rows returned"
        where: objectives_bool_exp
    ): [objectives!]!
    "fetch aggregated fields from the table: \"objectives\""
    objectives_aggregate(
        "distinct select on columns"
        distinct_on: [objectives_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [objectives_order_by!],
        "filter the rows returned"
        where: objectives_bool_exp
    ): objectives_aggregate!
    "fetch data from the table: \"objectives\" using primary key columns"
    objectives_by_pk(id: uuid!): objectives
    "fetch data from the table: \"task\""
    task(
        "distinct select on columns"
        distinct_on: [task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [task_order_by!],
        "filter the rows returned"
        where: task_bool_exp
    ): [task!]!
    "fetch aggregated fields from the table: \"task\""
    task_aggregate(
        "distinct select on columns"
        distinct_on: [task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [task_order_by!],
        "filter the rows returned"
        where: task_bool_exp
    ): task_aggregate!
    "fetch data from the table: \"task\" using primary key columns"
    task_by_pk(id: uuid!): task
}

"columns and relationships of \"task\""
type task {
    action: String
    created_at: timestamptz!
    done: Boolean!
    id: uuid!
    objectiveId: uuid!
    updated_at: timestamptz!
}

"aggregated selection of \"task\""
type task_aggregate {
    aggregate: task_aggregate_fields
    nodes: [task!]!
}

"aggregate fields of \"task\""
type task_aggregate_fields {
    count(columns: [task_select_column!], distinct: Boolean): Int!
    max: task_max_fields
    min: task_min_fields
}

"aggregate max on columns"
type task_max_fields {
    action: String
    created_at: timestamptz
    id: uuid
    objectiveId: uuid
    updated_at: timestamptz
}

"aggregate min on columns"
type task_min_fields {
    action: String
    created_at: timestamptz
    id: uuid
    objectiveId: uuid
    updated_at: timestamptz
}

"response of any mutation on the table \"task\""
type task_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [task!]!
}

"unique or primary key constraints on table \"objectives\""
enum objectives_constraint {
    "unique or primary key constraint"
    objectives_pkey
}

"select columns of table \"objectives\""
enum objectives_select_column {
    "column name"
    created_at
    "column name"
    favorite
    "column name"
    id
    "column name"
    notionUrl
    "column name"
    title
    "column name"
    updated_at
}

"update columns of table \"objectives\""
enum objectives_update_column {
    "column name"
    created_at
    "column name"
    favorite
    "column name"
    id
    "column name"
    notionUrl
    "column name"
    title
    "column name"
    updated_at
}

"column ordering options"
enum order_by {
    "in ascending order, nulls last"
    asc
    "in ascending order, nulls first"
    asc_nulls_first
    "in ascending order, nulls last"
    asc_nulls_last
    "in descending order, nulls first"
    desc
    "in descending order, nulls first"
    desc_nulls_first
    "in descending order, nulls last"
    desc_nulls_last
}

"unique or primary key constraints on table \"task\""
enum task_constraint {
    "unique or primary key constraint"
    task_pkey
}

"select columns of table \"task\""
enum task_select_column {
    "column name"
    action
    "column name"
    created_at
    "column name"
    done
    "column name"
    id
    "column name"
    objectiveId
    "column name"
    updated_at
}

"update columns of table \"task\""
enum task_update_column {
    "column name"
    action
    "column name"
    created_at
    "column name"
    done
    "column name"
    id
    "column name"
    objectiveId
    "column name"
    updated_at
}

"Boolean expression to compare columns of type \"Boolean\". All fields are combined with logical 'AND'."
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    "does the column match the given case-insensitive pattern"
    _ilike: String
    _in: [String!]
    "does the column match the given POSIX regular expression, case insensitive"
    _iregex: String
    _is_null: Boolean
    "does the column match the given pattern"
    _like: String
    _lt: String
    _lte: String
    _neq: String
    "does the column NOT match the given case-insensitive pattern"
    _nilike: String
    _nin: [String!]
    "does the column NOT match the given POSIX regular expression, case insensitive"
    _niregex: String
    "does the column NOT match the given pattern"
    _nlike: String
    "does the column NOT match the given POSIX regular expression, case sensitive"
    _nregex: String
    "does the column NOT match the given SQL regular expression"
    _nsimilar: String
    "does the column match the given POSIX regular expression, case sensitive"
    _regex: String
    "does the column match the given SQL regular expression"
    _similar: String
}

"Boolean expression to filter rows from the table \"objectives\". All fields are combined with a logical 'AND'."
input objectives_bool_exp {
    _and: [objectives_bool_exp!]
    _not: objectives_bool_exp
    _or: [objectives_bool_exp!]
    created_at: timestamptz_comparison_exp
    favorite: Boolean_comparison_exp
    id: uuid_comparison_exp
    notionUrl: String_comparison_exp
    title: String_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"input type for inserting data into table \"objectives\""
input objectives_insert_input {
    created_at: timestamptz
    favorite: Boolean
    id: uuid
    notionUrl: String
    title: String
    updated_at: timestamptz
}

"on conflict condition type for table \"objectives\""
input objectives_on_conflict {
    constraint: objectives_constraint!
    update_columns: [objectives_update_column!]! = []
    where: objectives_bool_exp
}

"Ordering options when selecting data from \"objectives\"."
input objectives_order_by {
    created_at: order_by
    favorite: order_by
    id: order_by
    notionUrl: order_by
    title: order_by
    updated_at: order_by
}

"primary key columns input for table: objectives"
input objectives_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"objectives\""
input objectives_set_input {
    created_at: timestamptz
    favorite: Boolean
    id: uuid
    notionUrl: String
    title: String
    updated_at: timestamptz
}

"Boolean expression to filter rows from the table \"task\". All fields are combined with a logical 'AND'."
input task_bool_exp {
    _and: [task_bool_exp!]
    _not: task_bool_exp
    _or: [task_bool_exp!]
    action: String_comparison_exp
    created_at: timestamptz_comparison_exp
    done: Boolean_comparison_exp
    id: uuid_comparison_exp
    objectiveId: uuid_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"input type for inserting data into table \"task\""
input task_insert_input {
    action: String
    created_at: timestamptz
    done: Boolean
    id: uuid
    objectiveId: uuid
    updated_at: timestamptz
}

"on conflict condition type for table \"task\""
input task_on_conflict {
    constraint: task_constraint!
    update_columns: [task_update_column!]! = []
    where: task_bool_exp
}

"Ordering options when selecting data from \"task\"."
input task_order_by {
    action: order_by
    created_at: order_by
    done: order_by
    id: order_by
    objectiveId: order_by
    updated_at: order_by
}

"primary key columns input for table: task"
input task_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"task\""
input task_set_input {
    action: String
    created_at: timestamptz
    done: Boolean
    id: uuid
    objectiveId: uuid
    updated_at: timestamptz
}

"Boolean expression to compare columns of type \"timestamptz\". All fields are combined with logical 'AND'."
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}

"Boolean expression to compare columns of type \"uuid\". All fields are combined with logical 'AND'."
input uuid_comparison_exp {
    _eq: uuid
    _gt: uuid
    _gte: uuid
    _in: [uuid!]
    _is_null: Boolean
    _lt: uuid
    _lte: uuid
    _neq: uuid
    _nin: [uuid!]
}


scalar timestamptz

scalar uuid