# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"columns and relationships of \"articles\""
type articles {
    authorId: uuid!
    content: String!
    created_at: timestamptz!
    id: uuid!
    published_at: timestamptz
    subject: String!
    updated_at: timestamptz!
    "An object relationship"
    user: users!
}

"aggregated selection of \"articles\""
type articles_aggregate {
    aggregate: articles_aggregate_fields
    nodes: [articles!]!
}

"aggregate fields of \"articles\""
type articles_aggregate_fields {
    count(columns: [articles_select_column!], distinct: Boolean): Int!
    max: articles_max_fields
    min: articles_min_fields
}

"aggregate max on columns"
type articles_max_fields {
    authorId: uuid
    content: String
    created_at: timestamptz
    id: uuid
    published_at: timestamptz
    subject: String
    updated_at: timestamptz
}

"aggregate min on columns"
type articles_min_fields {
    authorId: uuid
    content: String
    created_at: timestamptz
    id: uuid
    published_at: timestamptz
    subject: String
    updated_at: timestamptz
}

"response of any mutation on the table \"articles\""
type articles_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [articles!]!
}

"mutation root"
type mutation_root {
    "delete data from the table: \"articles\""
    delete_articles(
        "filter the rows which have to be deleted"
        where: articles_bool_exp!
    ): articles_mutation_response
    "delete single row from the table: \"articles\""
    delete_articles_by_pk(id: uuid!): articles
    "delete data from the table: \"users\""
    delete_users(
        "filter the rows which have to be deleted"
        where: users_bool_exp!
    ): users_mutation_response
    "delete single row from the table: \"users\""
    delete_users_by_pk(id: uuid!): users
    "insert data into the table: \"articles\""
    insert_articles(
        "the rows to be inserted"
        objects: [articles_insert_input!]!,
        "on conflict condition"
        on_conflict: articles_on_conflict
    ): articles_mutation_response
    "insert a single row into the table: \"articles\""
    insert_articles_one(
        "the row to be inserted"
        object: articles_insert_input!,
        "on conflict condition"
        on_conflict: articles_on_conflict
    ): articles
    "insert data into the table: \"users\""
    insert_users(
        "the rows to be inserted"
        objects: [users_insert_input!]!,
        "on conflict condition"
        on_conflict: users_on_conflict
    ): users_mutation_response
    "insert a single row into the table: \"users\""
    insert_users_one(
        "the row to be inserted"
        object: users_insert_input!,
        "on conflict condition"
        on_conflict: users_on_conflict
    ): users
    "update data of the table: \"articles\""
    update_articles(
        "sets the columns of the filtered rows to the given values"
        _set: articles_set_input,
        "filter the rows which have to be updated"
        where: articles_bool_exp!
    ): articles_mutation_response
    "update single row of the table: \"articles\""
    update_articles_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: articles_set_input,
        pk_columns: articles_pk_columns_input!
    ): articles
    "update data of the table: \"users\""
    update_users(
        "sets the columns of the filtered rows to the given values"
        _set: users_set_input,
        "filter the rows which have to be updated"
        where: users_bool_exp!
    ): users_mutation_response
    "update single row of the table: \"users\""
    update_users_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: users_set_input,
        pk_columns: users_pk_columns_input!
    ): users
}

type query_root {
    "An array relationship"
    articles(
        "distinct select on columns"
        distinct_on: [articles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [articles_order_by!],
        "filter the rows returned"
        where: articles_bool_exp
    ): [articles!]!
    "An aggregate relationship"
    articles_aggregate(
        "distinct select on columns"
        distinct_on: [articles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [articles_order_by!],
        "filter the rows returned"
        where: articles_bool_exp
    ): articles_aggregate!
    "fetch data from the table: \"articles\" using primary key columns"
    articles_by_pk(id: uuid!): articles
    "fetch data from the table: \"users\""
    users(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): [users!]!
    "fetch aggregated fields from the table: \"users\""
    users_aggregate(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): users_aggregate!
    "fetch data from the table: \"users\" using primary key columns"
    users_by_pk(id: uuid!): users
}

type subscription_root {
    "An array relationship"
    articles(
        "distinct select on columns"
        distinct_on: [articles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [articles_order_by!],
        "filter the rows returned"
        where: articles_bool_exp
    ): [articles!]!
    "An aggregate relationship"
    articles_aggregate(
        "distinct select on columns"
        distinct_on: [articles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [articles_order_by!],
        "filter the rows returned"
        where: articles_bool_exp
    ): articles_aggregate!
    "fetch data from the table: \"articles\" using primary key columns"
    articles_by_pk(id: uuid!): articles
    "fetch data from the table: \"users\""
    users(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): [users!]!
    "fetch aggregated fields from the table: \"users\""
    users_aggregate(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): users_aggregate!
    "fetch data from the table: \"users\" using primary key columns"
    users_by_pk(id: uuid!): users
}

"columns and relationships of \"users\""
type users {
    "An array relationship"
    articles(
        "distinct select on columns"
        distinct_on: [articles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [articles_order_by!],
        "filter the rows returned"
        where: articles_bool_exp
    ): [articles!]!
    "An aggregate relationship"
    articles_aggregate(
        "distinct select on columns"
        distinct_on: [articles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [articles_order_by!],
        "filter the rows returned"
        where: articles_bool_exp
    ): articles_aggregate!
    created_at: timestamptz!
    displayName: String!
    displayId: String!
    id: uuid!
    updated_at: timestamptz!
}

"aggregated selection of \"users\""
type users_aggregate {
    aggregate: users_aggregate_fields
    nodes: [users!]!
}

"aggregate fields of \"users\""
type users_aggregate_fields {
    count(columns: [users_select_column!], distinct: Boolean): Int!
    max: users_max_fields
    min: users_min_fields
}

"aggregate max on columns"
type users_max_fields {
    created_at: timestamptz
    displayName: String
    displayId: String
    id: uuid
    updated_at: timestamptz
}

"aggregate min on columns"
type users_min_fields {
    created_at: timestamptz
    displayName: String
    displayId: String
    id: uuid
    updated_at: timestamptz
}

"response of any mutation on the table \"users\""
type users_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [users!]!
}

"unique or primary key constraints on table \"articles\""
enum articles_constraint {
    "unique or primary key constraint"
    articles_pkey
}

"select columns of table \"articles\""
enum articles_select_column {
    "column name"
    authorId
    "column name"
    content
    "column name"
    created_at
    "column name"
    id
    "column name"
    published_at
    "column name"
    subject
    "column name"
    updated_at
}

"update columns of table \"articles\""
enum articles_update_column {
    "column name"
    authorId
    "column name"
    content
    "column name"
    created_at
    "column name"
    id
    "column name"
    published_at
    "column name"
    subject
    "column name"
    updated_at
}

"column ordering options"
enum order_by {
    "in ascending order, nulls last"
    asc
    "in ascending order, nulls first"
    asc_nulls_first
    "in ascending order, nulls last"
    asc_nulls_last
    "in descending order, nulls first"
    desc
    "in descending order, nulls first"
    desc_nulls_first
    "in descending order, nulls last"
    desc_nulls_last
}

"unique or primary key constraints on table \"users\""
enum users_constraint {
    "unique or primary key constraint"
    users_display_id_key
    "unique or primary key constraint"
    users_pkey
}

"select columns of table \"users\""
enum users_select_column {
    "column name"
    created_at
    "column name"
    displayName
    "column name"
    displayId
    "column name"
    id
    "column name"
    updated_at
}

"update columns of table \"users\""
enum users_update_column {
    "column name"
    created_at
    "column name"
    displayName
    "column name"
    displayId
    "column name"
    id
    "column name"
    updated_at
}

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    "does the column match the given case-insensitive pattern"
    _ilike: String
    _in: [String!]
    "does the column match the given POSIX regular expression, case insensitive"
    _iregex: String
    _is_null: Boolean
    "does the column match the given pattern"
    _like: String
    _lt: String
    _lte: String
    _neq: String
    "does the column NOT match the given case-insensitive pattern"
    _nilike: String
    _nin: [String!]
    "does the column NOT match the given POSIX regular expression, case insensitive"
    _niregex: String
    "does the column NOT match the given pattern"
    _nlike: String
    "does the column NOT match the given POSIX regular expression, case sensitive"
    _nregex: String
    "does the column NOT match the given SQL regular expression"
    _nsimilar: String
    "does the column match the given POSIX regular expression, case sensitive"
    _regex: String
    "does the column match the given SQL regular expression"
    _similar: String
}

"order by aggregate values of table \"articles\""
input articles_aggregate_order_by {
    count: order_by
    max: articles_max_order_by
    min: articles_min_order_by
}

"input type for inserting array relation for remote table \"articles\""
input articles_arr_rel_insert_input {
    data: [articles_insert_input!]!
    "on conflict condition"
    on_conflict: articles_on_conflict
}

"Boolean expression to filter rows from the table \"articles\". All fields are combined with a logical 'AND'."
input articles_bool_exp {
    _and: [articles_bool_exp!]
    _not: articles_bool_exp
    _or: [articles_bool_exp!]
    authorId: uuid_comparison_exp
    content: String_comparison_exp
    created_at: timestamptz_comparison_exp
    id: uuid_comparison_exp
    published_at: timestamptz_comparison_exp
    subject: String_comparison_exp
    updated_at: timestamptz_comparison_exp
    user: users_bool_exp
}

"input type for inserting data into table \"articles\""
input articles_insert_input {
    authorId: uuid
    content: String
    created_at: timestamptz
    id: uuid
    published_at: timestamptz
    subject: String
    updated_at: timestamptz
    user: users_obj_rel_insert_input
}

"order by max() on columns of table \"articles\""
input articles_max_order_by {
    authorId: order_by
    content: order_by
    created_at: order_by
    id: order_by
    published_at: order_by
    subject: order_by
    updated_at: order_by
}

"order by min() on columns of table \"articles\""
input articles_min_order_by {
    authorId: order_by
    content: order_by
    created_at: order_by
    id: order_by
    published_at: order_by
    subject: order_by
    updated_at: order_by
}

"on conflict condition type for table \"articles\""
input articles_on_conflict {
    constraint: articles_constraint!
    update_columns: [articles_update_column!]! = []
    where: articles_bool_exp
}

"Ordering options when selecting data from \"articles\"."
input articles_order_by {
    authorId: order_by
    content: order_by
    created_at: order_by
    id: order_by
    published_at: order_by
    subject: order_by
    updated_at: order_by
    user: users_order_by
}

"primary key columns input for table: articles"
input articles_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"articles\""
input articles_set_input {
    authorId: uuid
    content: String
    created_at: timestamptz
    id: uuid
    published_at: timestamptz
    subject: String
    updated_at: timestamptz
}

"Boolean expression to compare columns of type \"timestamptz\". All fields are combined with logical 'AND'."
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}

"Boolean expression to filter rows from the table \"users\". All fields are combined with a logical 'AND'."
input users_bool_exp {
    _and: [users_bool_exp!]
    _not: users_bool_exp
    _or: [users_bool_exp!]
    articles: articles_bool_exp
    created_at: timestamptz_comparison_exp
    displayName: String_comparison_exp
    displayId: String_comparison_exp
    id: uuid_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"input type for inserting data into table \"users\""
input users_insert_input {
    articles: articles_arr_rel_insert_input
    created_at: timestamptz
    displayName: String
    displayId: String
    id: uuid
    updated_at: timestamptz
}

"input type for inserting object relation for remote table \"users\""
input users_obj_rel_insert_input {
    data: users_insert_input!
    "on conflict condition"
    on_conflict: users_on_conflict
}

"on conflict condition type for table \"users\""
input users_on_conflict {
    constraint: users_constraint!
    update_columns: [users_update_column!]! = []
    where: users_bool_exp
}

"Ordering options when selecting data from \"users\"."
input users_order_by {
    articles_aggregate: articles_aggregate_order_by
    created_at: order_by
    displayName: order_by
    displayId: order_by
    id: order_by
    updated_at: order_by
}

"primary key columns input for table: users"
input users_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"users\""
input users_set_input {
    created_at: timestamptz
    displayName: String
    displayId: String
    id: uuid
    updated_at: timestamptz
}

"Boolean expression to compare columns of type \"uuid\". All fields are combined with logical 'AND'."
input uuid_comparison_exp {
    _eq: uuid
    _gt: uuid
    _gte: uuid
    _in: [uuid!]
    _is_null: Boolean
    _lt: uuid
    _lte: uuid
    _neq: uuid
    _nin: [uuid!]
}


scalar timestamptz

scalar uuid